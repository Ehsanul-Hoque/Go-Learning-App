// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'network/models/api_auth/profile_get_response.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 8595984982184601627),
      name: 'ProfileGetResponseData',
      lastPropertyId: const IdUid(16, 4752604653727546594),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5470938740194562187),
            name: 'boxId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1159551567908372890),
            name: 'sId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 604099012918486955),
            name: 'institution',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1270487638486038302),
            name: 'enrolledCourses',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5958742046827396388),
            name: 'verified',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6003858945136946266),
            name: 'fingerprintToken',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3251173688984292558),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4219435670445509021),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5039697377928362216),
            name: 'createdAt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7549665548126536326),
            name: 'updatedAt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7189063158590713565),
            name: 'iV',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 8550989483723369490),
            name: 'address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 2378737685396543983),
            name: 'selectedClass',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 791176704537941011),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 6452236359536811469),
            name: 'photo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 4752604653727546594),
            name: 'userType',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 8595984982184601627),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ProfileGetResponseData: EntityDefinition<ProfileGetResponseData>(
        model: _entities[0],
        toOneRelations: (ProfileGetResponseData object) => [],
        toManyRelations: (ProfileGetResponseData object) => {},
        getId: (ProfileGetResponseData object) => object.boxId,
        setId: (ProfileGetResponseData object, int id) {
          object.boxId = id;
        },
        objectToFB: (ProfileGetResponseData object, fb.Builder fbb) {
          final sIdOffset =
              object.sId == null ? null : fbb.writeString(object.sId!);
          final institutionOffset = object.institution == null
              ? null
              : fbb.writeString(object.institution!);
          final enrolledCoursesOffset = object.enrolledCourses == null
              ? null
              : fbb.writeList(object.enrolledCourses!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final fingerprintTokenOffset = object.fingerprintToken == null
              ? null
              : fbb.writeList(object.fingerprintToken!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final createdAtOffset = object.createdAt == null
              ? null
              : fbb.writeString(object.createdAt!);
          final updatedAtOffset = object.updatedAt == null
              ? null
              : fbb.writeString(object.updatedAt!);
          final addressOffset =
              object.address == null ? null : fbb.writeString(object.address!);
          final selectedClassOffset = object.selectedClass == null
              ? null
              : fbb.writeString(object.selectedClass!);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final photoOffset =
              object.photo == null ? null : fbb.writeString(object.photo!);
          final userTypeOffset = object.userType == null
              ? null
              : fbb.writeString(object.userType!);
          fbb.startTable(17);
          fbb.addInt64(0, object.boxId);
          fbb.addOffset(1, sIdOffset);
          fbb.addOffset(2, institutionOffset);
          fbb.addOffset(3, enrolledCoursesOffset);
          fbb.addBool(4, object.verified);
          fbb.addOffset(5, fingerprintTokenOffset);
          fbb.addOffset(6, emailOffset);
          fbb.addOffset(7, nameOffset);
          fbb.addOffset(8, createdAtOffset);
          fbb.addOffset(9, updatedAtOffset);
          fbb.addInt64(10, object.iV);
          fbb.addOffset(11, addressOffset);
          fbb.addOffset(12, selectedClassOffset);
          fbb.addOffset(13, phoneOffset);
          fbb.addOffset(14, photoOffset);
          fbb.addOffset(15, userTypeOffset);
          fbb.finish(fbb.endTable());
          return object.boxId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProfileGetResponseData(
              boxId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              sId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              institution: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              enrolledCourses: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 10),
              verified: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 12),
              fingerprintToken:
                  const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                      .vTableGetNullable(buffer, rootOffset, 14),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              createdAt: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 20),
              updatedAt: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 22),
              iV: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24),
              address: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 26),
              selectedClass: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 28),
              phone: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 30),
              photo: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 32),
              userType: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 34));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ProfileGetResponseData] entity fields to define ObjectBox queries.
class ProfileGetResponseData_ {
  /// see [ProfileGetResponseData.boxId]
  static final boxId =
      QueryIntegerProperty<ProfileGetResponseData>(_entities[0].properties[0]);

  /// see [ProfileGetResponseData.sId]
  static final sId =
      QueryStringProperty<ProfileGetResponseData>(_entities[0].properties[1]);

  /// see [ProfileGetResponseData.institution]
  static final institution =
      QueryStringProperty<ProfileGetResponseData>(_entities[0].properties[2]);

  /// see [ProfileGetResponseData.enrolledCourses]
  static final enrolledCourses =
      QueryStringVectorProperty<ProfileGetResponseData>(
          _entities[0].properties[3]);

  /// see [ProfileGetResponseData.verified]
  static final verified =
      QueryBooleanProperty<ProfileGetResponseData>(_entities[0].properties[4]);

  /// see [ProfileGetResponseData.fingerprintToken]
  static final fingerprintToken =
      QueryStringVectorProperty<ProfileGetResponseData>(
          _entities[0].properties[5]);

  /// see [ProfileGetResponseData.email]
  static final email =
      QueryStringProperty<ProfileGetResponseData>(_entities[0].properties[6]);

  /// see [ProfileGetResponseData.name]
  static final name =
      QueryStringProperty<ProfileGetResponseData>(_entities[0].properties[7]);

  /// see [ProfileGetResponseData.createdAt]
  static final createdAt =
      QueryStringProperty<ProfileGetResponseData>(_entities[0].properties[8]);

  /// see [ProfileGetResponseData.updatedAt]
  static final updatedAt =
      QueryStringProperty<ProfileGetResponseData>(_entities[0].properties[9]);

  /// see [ProfileGetResponseData.iV]
  static final iV =
      QueryIntegerProperty<ProfileGetResponseData>(_entities[0].properties[10]);

  /// see [ProfileGetResponseData.address]
  static final address =
      QueryStringProperty<ProfileGetResponseData>(_entities[0].properties[11]);

  /// see [ProfileGetResponseData.selectedClass]
  static final selectedClass =
      QueryStringProperty<ProfileGetResponseData>(_entities[0].properties[12]);

  /// see [ProfileGetResponseData.phone]
  static final phone =
      QueryStringProperty<ProfileGetResponseData>(_entities[0].properties[13]);

  /// see [ProfileGetResponseData.photo]
  static final photo =
      QueryStringProperty<ProfileGetResponseData>(_entities[0].properties[14]);

  /// see [ProfileGetResponseData.userType]
  static final userType =
      QueryStringProperty<ProfileGetResponseData>(_entities[0].properties[15]);
}
